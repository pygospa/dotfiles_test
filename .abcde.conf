#------------------------------------------------------------------------------
# Author                Kannan Thambiah <pygospa@gmail.com>
# Latest version        https://github.com/pygospa/dotfiles



#------------------------------------------------------------------------------
# General settings
#
ACTIONS=cddb,read,getalbumart,encode,tag,move,playlist,clean
                                # Everything you want abcde to do
COMMENT=''                      # If you want to sign your rips with a comment...
EJECTCD=y                       # Please show yourself out on your own (I'm lazy)
EXTRAVERBOSE=2                  # Talk to me baby...
INTERACTIVE=y                   # Please bother me
LOWDISK=y                       # Immediate encoding (better readings/slower)
MAXPROCS=4                      # Run 4 encoders simultaneously
OUTPUTTYPE="flac,opus"          # Formats to encode to: flac and ogg/opus
#OUTPUTTYPE="flac,mp3,ogg,opus" # Formats to encode to: flac, mp3, ogg/vorbis
PADTRACKS=y                     # Leading zeroes for tracks (i.e. 01, 02, 03)



#------------------------------------------------------------------------------
# Identifying the CD
#
CDDISCID=cd-discid              # binary name/path of cd-discid



#------------------------------------------------------------------------------
# Optaining metadata
#

CDDA2WAV=cdda2wav		# cdda2wav (cdrtools) instead of icedax (cdrkit)
#CDDBMETHOD=musicbrainz          # musicbrainz instead of cddb
CDDBURL=http://gnudb.gnudb.org/~cddb/cddb.cgi
CDDBPROTO=6                     # Protocol to use (5 = latin1, 6 = utf8)
CDDBCOPYLOCAL="y"               # Keep a local copy of the cddb data
CDDBLOCALDIR="$HOME/files/rips/cddb"  # local cddb repository
CDDBUSELOCAL="y"                # Use the local copy of cddb data if available
CDDBLOCALRECURSIVE="y"          # search the local repository recursively
SHOWCDDBFIELDS=tracknum,artist,title,year,genre
                                # Fields to parse during cddb parsing

#------------------------------------------------------------------------------
# Optaining and displaying album art
#
GLYRC=glyrc                     # USE glyrc to download cover artworks
GLYRCOPTS="--qsratio 1.0 --from all -slothradio"
IDENTIFY=identify               # Use imagemagick identify to tell us something
                                # about the image found


#------------------------------------------------------------------------------
# Ripping the CD
#
CDROMREADERSYNTAX=cdparanoia    # Which ripper to use
CDPARANOIA=cdparanoia           # binary name/path of ripper
CDPARANOIAOPTS="--verbose --never-skip --log-summary --log-debug"
                                # Options to enable in cdparanoia


#------------------------------------------------------------------------------
# Free Lossless Audio Codec (FLAC) encoding settings
#
FLACENCODERSYNTAX=flac          # Which encoder to use for flac
FLAC=flac                       # binary name/path to FLAC encoder
FLACOPTS='--compression-level-8 --exhaustive-model-search --no-silent --verify'
                                # Options for the FLAC compression


#------------------------------------------------------------------------------
# ogg/opus encoding settings
#
OPUSENCODER=opusenc             # Which encoder to use for ogg/opus
OPUSENC=opusenc                 # binary name/path of opus encoder
OPUSENCOPTS="--bitrate 128"     # Options for opusenc (~128kbps vbr)



#------------------------------------------------------------------------------
# ogg/vorbis encoding settings
#
OGGENCODERSYNTAX=oggenc         # Which encoder to use for ogg/vorbis
OGGENC=oggenc                   # binary name/path of vorbis encoder
OGGOPTS='--quality 5'           # Options for oggenc (q5 ~160kbps vbr)



#------------------------------------------------------------------------------
# MPEG-1 Layer III encoding settings
#
MP3ENCODERSYNTAX=lame           # Which encoder to use for mp3
LAME=lame                       # Path to MP3 encoder
LAMEOPTS='-h -V2'               # Options for MP3 (V2 ~190kbps vbr)



#------------------------------------------------------------------------------
# Paths and file names
#
OUTPUTDIR="$HOME/files/rips"     # Base location for encoded music files
OUTPUTFORMAT='${OUTPUT}/${ARTISTFILE}/${ALBUMFILE}/${TRACKNUM} ${TRACKFILE}'
                                # Single artist file names
VAOUTPUTFORMAT='${OUTPUT}/Various/${ALBUMFILE}/${TRACKNUM} ${ARTISTFILE} - ${TRACKFILE}'
                                # Various artists file names
ONETRACKOUTPUTFORMAT='${OUTPUT}/${ARTISTFILE}/${ALBUMFILE}/${ALBUMFILE}'
                                # Single track album (abcde -1), single artist
VAONETRACKOUTPUTFORMAT='${OUTPUT}/Various/${ALBUMFILE}/${ALBUMFILE}'
                                # Single track album (abcde -1), various artists
PLAYLISTFORMAT='${OUTPUT}/${ARTISTFILE}/${ALBUMFILE}/${ALBUMFILE}.m3u'
                                # Single artist playlist file
VAPLAYLISTFORMAT='${OUTPUT}/Various/${ALBUMFILE}/${ALBUMFILE}.m3u'
                                # Various artists playlist file


#------------------------------------------------------------------------------
# Additional functions
#



#=== FUNCTION =================================================================
#        Name: pre_read()
# Description: This function is evaluated just before starting the reading
#              process; it will close the CD tray and wait for 5 seconds
#==============================================================================
pre_read ()
{
   eject -t	# I'm just unbelievable lazy :D
   sleep 5
}



#=== FUNCTION =================================================================
#        Name: pre_read()
# Description: This function takes out dots preceding the album name, and
#	       removes a grab bag of illegal characters. It allows spaces, if
#	       you do not wish spaces add in -e 's/ /_/g' after the first sed
#	       command.
#      Author: Andrew Strong
#         URL: http://www.andrews-corner.org/linux/abcde/index.html
#==============================================================================
mungefilename() {
    echo "$@" | sed -e 's/^\.*//' | tr -d ":><|*/\"'?[:cntrl:]"
}



#=== FUNCTION =================================================================
#        Name: post_encode()
# Description: This function is evaluated after the encoding process is
#	       finnished; it will include the cover artwork in the tags of all
#	       produced files.
#	       Originally inspired by Andrew Strong
#	       (http://www.andrews-corner.org/linux/abcde/getalbumart.html),
#	       this was heavily simplified using kid3-cli for tagging all
#	       formats.
#	       See: https://kid3.sourceforge.io/kid3_en.html#kid3-cli
#==============================================================================
post_encode() {
    # Variables needed by $VAOUTPUTFORMAT/$OUTPUTFORMAT to construct the directory
    ARTISTFILE="$(mungefilename "$TRACKARTIST")"
    ALBUMFILE="$(mungefilename "$DALBUM")"

    for OUTPUT in $(echo $OUTPUTTYPE | tr , \ ); do
	# Construct the output directory
        if [ "$VARIOUSARTISTS" = "y" ] ; then
            FINDPATH="$(eval echo "$VAOUTPUTFORMAT")"
        else
            FINDPATH="$(eval echo "$OUTPUTFORMAT")"
        fi
        FINALDIR="$(dirname "$OUTPUTDIR/$FINDPATH")"

	# switch to output directory
        cd "$FINALDIR"
	pwd

	# Append cover.jpg as tag to audio files, if cover.jpg exists
        if [ -e "cover.jpg" ] ; then
	    kid3-cli -c "select all" -c 'set picture:"cover.jpg" ""'
	    echo "Your "$OUTPUT" files have had the album art embedded..." >&2
	else
            echo "There is no Cover image for "$OUTPUT" files..." >&3
	fi
    done
}
